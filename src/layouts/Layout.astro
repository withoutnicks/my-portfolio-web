---
import "@/styles/globals.css";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="I am a frontend web developer, this is my web portfolio where I show my information and projects. I am from Peru" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="og:title" content={title} />
    <meta name="og:description" content="I am a frontend web developer, this is my web portfolio where I show my information and projects. I am from Peru" />
    <meta name="og:image" content="https://raw.githubusercontent.com/withoutnicks/my-portfolio-web/refs/heads/main/public/preview.webp?token=GHSAT0AAAAAACWD4HERRZGUP24YW6VUYXBGZZKQPEQ" />
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content="I am a frontend web developer, this is my web portfolio where I show my information and projects. I am from Peru" />
    <meta name="twitter:image" content="https://raw.githubusercontent.com/withoutnicks/my-portfolio-web/refs/heads/main/public/preview.webp?token=GHSAT0AAAAAACWD4HERRZGUP24YW6VUYXBGZZKQPEQ" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300..700&display=swap"
      rel="stylesheet"
    />
    <title>{title}</title>
  </head>
  <body class="bg-white text-black dark:text-white dark:bg-black font-space overflow-x-hidden selection:bg-emerald-100 selection:dark:bg-well-red-400">
    <div class="max-w-4xl mx-auto">
      <slot />
    </div>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
